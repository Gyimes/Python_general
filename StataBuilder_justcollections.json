#Creation of a local Stata ADO repository

########IMPORTANT!!!!!!!! ##############
### This sorry state of a script was only used to build the repo, this is not needed for the upkeep
# this is just a collection of ideas to be able to use it later in case of need



# Functions
from Functions import *
# Problemchildren, files that cause problem and are not needed 
problemchildren = ['basetable_example_data', 'fxrates', 'bxmodel', 'calccsi', 'calciri', 'cards', 'calccci', 'calcmcci', 'chesspuzzle', 'clt', 'cordemo', 'cvlassologit', 'datelab', 'diablo', 'exprcmd', 'effmenu1', 'errange', 'ernull', 'frac_rep', 'find', 'grnotem', 'grlog', 'grols',  'hkwarrant', 'hktrade', 'ltablem', 'lw_unit', 'labsave5', 'meanpt', 'meaning', 'notedit', 'pantob', 'pip_cache', 'pvenn', 'pwrdemo2', 'pwrdemo3', 'prcompw', 'ptransdb', 'python', 'regpt', 'rfluse', 'rflsetmenu', 'sdmdemo', 'ssdlg', 'ssadvdlg', 'ssbindlg', 'sskdlg', 't2demo', 'tabmenu1', 'trackuse', 't_menu', 'varxplor', 'wordy', 'wor', 'w', 'wo', 'word', 'ridge2sls'] # basetable_example_data.ado - tries to download .dta file from the web
forgivenones = ['labedit','pantob06val', 'runmlwin_qshell','sssetdlg']
# Paths
dirtydir = "<path>/Old_ADOs/" # Where the manually added files are
cleandir = "<path>/ADO_Files/" # Where the cleaned and checked files will be moved
homedir = "<path>/ado/plus/" # Where Stata will install instinctually
logfold = f"<path>/Statalogs/{datetime.now().strftime('%Y%m%d')}"
if not os.path.exists(logfold):
    os.makedirs(logfold)
workingroot = logfold # Where we will keep a record about all installation and search attempt
currdir = "<path>/Syntax_files/Organise_Stata/" # where jupyter lab is working
catdir = f"<path>/Desktop/Stata_catalogue/{datetime.now().strftime('%Y%m%d')}"
if not os.path.exists(catdir):
    os.makedirs(catdir)
# Search for all possible Stata ADOs based on ssc describe and net search functions
letters = []
for let in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'py']:
    letters.append(pd.concat([SSC_describer(let, workingroot),Net_describer(let, workingroot)]).drop_duplicates())
allados = pd.concat(letters, ignore_index=True)
# Install all ADOs, this can be done parallel

rows = list(allados.iterrows())

with ThreadPoolExecutor() as executor:
    # Submit tasks to the executor
    futures = {executor.submit(Stata_Installer, row[1], workingroot): row[0] for row in rows}

# Run Security checks on all installed files. See criteria in Functions.py, folder jar is to be deleted, unrelosev issue - Python does not have access to it
num_threads = 8 # The security check can be done parallel, if it gets stuck, bring this down to 1, so the problemchild can be identified
# List all folders in the dirtydir
folds = [item for item in os.listdir(homedir) if '.' not in item]
# Check all files folder by folder
seclogs = []
for fold in folds:
    if fold in ['jar']:
        continue
    seclogs.append(Security_checker(homedir, cleandir, workingroot, problemchildren, num_threads, fold, currdir, forgivenones, dirtydir))
    print(seclogs)

# Create a dataframe of all files that are still in homedir after Securitycheck
df = Get_fileinfo(homedir)
# Create new Catalogue.csv
Catalogue = df[df['Type'] == 'ado'].drop(labels = 'Type', axis='columns')
Catalogue.to_csv(f"{catdir}/Catalogue.csv", index = False)

# Create the master dataframe of the ADOs we have at the moment
allados_fl = allados[allados['ADO'].isin([item for item in Catalogue['ADO']])]
allados_fl.to_csv(f"{currdir}/Data/ADO_repolist.csv", index = False)

legacy = df[~df['ADO'].isin(Bigdata['ADO'])]

Bigdata = pd.merge(df, res[['ADO', 'Parent_ADO', 'URL']], on='ADO', how='left', suffixes=('', '_res'))
Bigdata['Parent_ADO'] = Bigdata['Parent_ADO'].fillna(Bigdata['ADO'])
Bigdata = pd.merge(Bigdata, allados[['ADO', 'URL']], on='ADO', how='left', suffixes=('', '_allados'))
Bigdata['URL'] = Bigdata['URL'].combine_first(Bigdata['URL_allados'])
Bigdata['URL'] = Bigdata['URL'].fillna('tocheck')
Bigdata = Bigdata.drop(columns=['URL_allados'])

df = Get_fileinfo(homedir)
df['File'] = df['ADO']+'.'+df['Type']
wehave = [item for item in df['File']]

df2 = pd.concat([Bigdata, res], ignore_index = True).drop_duplicates()
df2['File'] = df2['ADO']+'.'+df2['Type']
weshouldhave = [item for item in df2['File']]
print(len(wehave))
print(len(weshouldhave))

pdf = []
for i in wehave:
    if i not in weshouldhave:
        ado = i.split('.')[0]
        type = i.split('.')[-1]
        if type == 'ado':
            pado, url = accounter(ado)
        else:
            pado = 'None'
            url = 'None'
        pdf.append(pd.DataFrame({'ADO' : [ado], 'Type' : [type], 'Parent_ADO' : [pado], 'URL' : [url], 'Checked' : [1]}))

pd.concat(pdf, ignore_index = True)

df['Parent_ADO'] = 'ISSUE'
df['URL'] = 'ISSUE'
df['Checked'] = 1
for f in df['File']:
    if f in [item for item in df2['File']]:
        df.loc[df['File'] == f, 'Parent_ADO'] = df2.loc[df2['File'] == f, 'Parent_ADO']
        df.loc[df['File'] == f, 'URL'] = df2.loc[df2['File'] == f, 'URL']

print(df)
df[df['Parent_ADO'] == 'ISSUE']
df[df['Parent_ADO'] == 'None']

for ado in [item for item in tocheck['ADO']]:
#    if ado == 'markg.ado':
#        continue
    tys2 = []
    for tys in ['ado', 'ADO', 'do', 'DO', 'hlp', 'shlp', 'sthlp', 'dta', 'DTA', 'py', 'mata', 'mlib', 'dlg', 'ihlp', 'idlg', 'doi', 'dll', 'mo', 'def', 'plugin', 'bak', 'scheme']:
        fp = search_file(dirtydir, ado, tys)
        if fp is not None:
            tys2.append(tys)
            source_file = fp
            destination_file = fp.replace(dirtydir, homedir)
            #shutil.copy2(source_file, destination_file)
    try:
        res.loc[res['ADO'] == ado, 'Type'] = tys2
    except ValueError:
        tys3 = []
        for i in range(len(res.loc[res['ADO'] == ado])):
            tys3.append(tys2)
        res.loc[res['ADO'] == ado, 'Type'] = tys3

    print(res.loc[res['ADO']== ado])

def Stata_Installer(row, workingroot):
    ado = row['ADO']
    url = row['URL']
    lgn = f"{workingroot}/{ado}_install.txt"
    command = [
        r'C:\Program Files\Stata18\StataMP-64.exe', 'log', 'using', lgn, '\n', 
        'net', 'install', ado, ',', 'from(',url, ')', '\n', 'log', 'close', 
        '\n', 'clear', 'all', '\n', 'exit'
    ]
    result = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = result.communicate()
    return stdout, stderr

def accounter(ado):
    lgn = f"{workingroot}/{ado}_checker.txt"
    command = [ r'C:\Program Files\Stata18\StataMP-64.exe', 'log', 'using', lgn, '\n', 
        'net', 'search', ado, '\n', 'log', 'close', '\n', 'clear', 'all', '\n', 'exit']
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    time.sleep(1)
    encodings = ['latin_1', 'utf_8']
    for encoding in encodings:
        try:
            with open(lgn, 'r', encoding=encoding) as file:
                lines = file.readlines()
                for line in lines:
                    if '@net:describe' in line:
                        ado2 = line.replace('@net:describe ', '').split('!')[0].split(',')[0]
                        url2 = line.replace('@net:describe ', '').split('!')[0].split(',')[1].replace(' ','').split('(')[1].split(')')[0]
                        lgn2 = f"{workingroot}/{ado2}_checker.txt"
                        command = [ r'C:\Program Files\Stata18\StataMP-64.exe', 'log', 'using', lgn2, '\n', 'net', 'describe', ado2, ',', 'from(', url2, ')', '\n', 'log', 'close', '\n', 'clear', 'all', '\n', 'exit']
                        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                        stdout, stderr = process.communicate()
                        for encoding in encodings:
                            try:
                                with open(lgn2, 'r', encoding = encoding) as file2:
                                    lines2 = file2.readlines()
                                    checker = 0
                                    for line2 in lines2:
                                        if "INSTALLATION FILES" in line2:
                                            checker = 1
                                        if f"{ado}.ado" in line2 and checker == 1:
                                            return ado2, url2
                                break
                            except UnicodeDecodeError:
                                continue
            break
        except UnicodeDecodeError:
            continue
    issue1 = "ERROR"
    issue2 = "ERROR"
    return issue1, issue2
